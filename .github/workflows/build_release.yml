name: Build and Release Binaries

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  ARCH: x86_64

jobs:
  linux-build-and-release:
    runs-on: ubuntu-latest
    env:
      TARGET: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version from Cargo.toml
        run: echo "VERSION=$(grep '^version' Cargo.toml | awk -F'"' '{print $2}')" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libfuse2

      - name: Install AppImage Tool
        run: |
          mkdir bin
          cd bin
          wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod a+x appimagetool-x86_64.AppImage
          mv appimagetool-x86_64.AppImage appimagetool
          echo "$(pwd)" >> $GITHUB_PATH

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Cargo Deb
        run: cargo install cargo-deb

      - name: Create artifact directory
        run: mkdir artifact

      - name: Build Debian Package
        run: |
          cargo deb --target ${{ env.TARGET }}
          mv target/${{env.TARGET}}/debian/media*.deb artifact/media_tools-${{env.VERSION}}-${{env.ARCH}}.deb

      - name: Get ffmpeg binary
        env:
          FFMPEG_TAR: ffmpeg-release-amd64-static.tar.xz
        run: |
          wget https://johnvansickle.com/ffmpeg/releases/${{env.FFMPEG_TAR}}
          mkdir ffmpeg-bin
          tar -xvf ${{env.FFMPEG_TAR}} --strip-components 1 --directory ffmpeg-bin

      - name: Build AppDir
        run: |
          mkdir -p media_tools.AppDir/usr/bin
          wget -O media_tools.AppDir/AppRun https://github.com/AppImage/AppImageKit/releases/download/13/AppRun-x86_64
          chmod +x ./media_tools.AppDir/AppRun
          cp target/${{env.TARGET}}/release/media_tools ./media_tools.AppDir/usr/bin
          cp ffmpeg-bin/* ./media_tools.AppDir/usr/bin || true
          touch media_tools.AppDir/icon.png
          cat << EOF > ./media_tools.AppDir/media_tools.desktop
          [Desktop Entry]
          Name=media_tools
          Exec=media_tools
          Icon=icon
          Type=Application
          Categories=Utility;
          X-AppImage-Version=${{env.VERSION}}
          EOF
          cat ./media_tools.AppDir/media_tools.desktop
          appimagetool media_tools.AppDir
          mv media_tools*.AppImage artifact/media_tools-${{env.VERSION}}-${{env.ARCH}}.AppImage

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: artifact/
          if-no-files-found: error
          retention-days: 1

  macos-build-and-release:
    runs-on: macos-latest
    env:
      TARGET: x86_64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version from Cargo.toml
        run: echo "VERSION=$(grep '^version' Cargo.toml | awk -F'"' '{print $2}')" >> $GITHUB_ENV

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Source
        run: cargo build --release --target ${{ env.TARGET }}

      - name: Package
        run: |
          mkdir -p MediaToolsInstaller/usr/local/bin
          cp target/${{env.TARGET}}/release/media_tools MediaToolsInstaller/usr/local/bin
          pkgbuild --identifier com.dreadster.mediatools --root MediaToolsInstaller --version ${{env.VERSION}} media_tools-${{env.VERSION}}-${{env.ARCH}}.pkg

      - name: Artifact Folder
        run: |
          mkdir artifact
          mv media_tools-${{env.VERSION}}-${{env.ARCH}}.pkg artifact
          mv target/${{env.TARGET}}/release/media_tools artifact/media_tools_macos_${{env.VERSION}}

      - name: Upload MacOs Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: artifact/
          if-no-files-found: error
          retention-days: 1

  windows-build-and-release:
    runs-on: windows-latest
    env:
      TARGET: x86_64-pc-windows-msvc
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version from Cargo.toml
        run: |
          $version = Get-Content Cargo.toml | Select-String -Pattern 'version = "(\d+\.\d+\.\d+-\w+)"' | ForEach-Object {$_.Matches.Groups[1].Value} | Select-Object -first 1
          echo "VERSION=${version}" >> $env:GITHUB_ENV

      - name: Install Innosetup
        run: |
          Invoke-WebRequest -OutFile innosetup.exe https://jrsoftware.org/download.php/is.exe
          ./innosetup.exe /VERYSILENT /NORESTART /CURRENTUSER

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Source
        run: cargo build --release --target ${{ env.TARGET }}

      - name: Setup Innosetup Script
        run: |
          $script=@'
          [Setup]
          AppName=MediaTools
          AppVersion=${{env.VERSION}}
          DefaultDirName={pf}\MediaTools
          OutputBaseFilename=media_tools-${{env.VERSION}}-${{env.ARCH}}-setup
          ChangesEnvironment=yes

          [Files]
          Source: "target/${{env.TARGET}}/release/media_tools.exe"; DestDir: "{app}"

          [Registry]
          Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; \
              ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}"; \
              Check: NeedsAddPath(ExpandConstant('{app}'))

          [Code]
          function NeedsAddPath(Param: string): boolean;
          var
            OrigPath: string;
          begin
            if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
              'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
              'Path', OrigPath)
            then begin
              Result := True;
              exit;
            end;
            Result := Pos(';' + Param + ';', ';' + OrigPath + ';') = 0;
          end;

          const
            EnvironmentKey = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';
          procedure RemovePath(Path: string);
          var
            Paths: string;
            P: Integer;
          begin
            if not RegQueryStringValue(HKLM, EnvironmentKey, 'Path', Paths) then
            begin
              Log('PATH not found');
            end
              else
            begin
              Log(Format('PATH is [%s]', [Paths]));

              P := Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';');

              if P = 0 then
              begin
                Log(Format('Path [%s] not found in PATH', [Path]));
              end
                else
              begin
                if P > 1 then P := P - 1;

                Delete(Paths, P, Length(Path) + 1);

                Log(Format('Path [%s] removed from PATH => [%s]', [Path, Paths]));

                if RegWriteStringValue(HKLM, EnvironmentKey, 'Path', Paths) then
                begin
                  Log('PATH written');
                end
                  else
                begin
                  Log('Error writing PATH');
                end;
              end;
            end;
          end;

          procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
          begin
            if CurUninstallStep = usUninstall then
            begin
              RemovePath(ExpandConstant('{app}'));
            end;
          end;
          '@
          echo $script > script.iss

      - name: Generate Installer
        run: iscc /Qp .\script.iss

      - name: Setup Artifact Folder
        run: |
          mkdir artifact
          mv Output/media_tools-${{env.VERSION}}-${{env.ARCH}}-setup.exe artifact/
          mv target/${{env.TARGET}}/release/media_tools.exe artifact/media_tools-${{env.VERSION}}-${{env.ARCH}}-Portable.exe

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: artifact/
          if-no-files-found: error
          retention-days: 1
